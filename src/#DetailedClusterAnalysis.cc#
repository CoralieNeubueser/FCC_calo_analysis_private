#include "ClusterAnalysis.h"

// FCC-EDM
#include "datamodel/MCParticleCollection.h"
#include "datamodel/CaloHitCollection.h"
#include "datamodel/PositionedCaloHitCollection.h"
#include "datamodel/CaloClusterCollection.h"
#include "datamodel/CaloCluster.h"

// PODIO
#include "podio/EventStore.h"
#include "podio/ROOTReader.h"

// ROOT
#include "TMath.h"
#include "TVector3.h"

// STL
#include <iostream>
#include <string>
#include <sstream>
#include <bitset>

ClusterAnalysis::ClusterAnalysis(double aEnergy, const std::string& aBitfieldEcal, const std::string& aClusterCollection, const std::string& aEcalCollection) : m_energy(aEnergy), ecal_decoder(aBitfieldEcal), clusterCollection(aClusterCollection), ecal_collection(aEcalCollection) {
  Initialize_histos();
}

ClusterAnalysis::~ClusterAnalysis() {}


void ClusterAnalysis::Initialize_histos() {
  double sigma = sqrt(pow(0.8*sqrt(m_energy)+0.02*(m_energy),2));

  h_clusters = new TH1F("h_clusters","", 4*std::ceil(4*sigma)+std::ceil(3*sigma), std::floor(m_energy-4*sigma), std::ceil(m_energy+3*sigma));
  m_histograms.push_back(h_clusters);

  double Et = m_energy / cosh(0);

  h_ET = new TH1F("h_ET","",100,Et-Et/2,Et+Et/2);
  m_histograms.push_back(h_ET);

  h_nClusters = new TH1F("h_nClusters","",100,0,100);
  m_histograms.push_back(h_nClusters);

  h_clusterEnergy = new TH1F("h_clusterEnergy","",100,0,m_energy+m_energy/2.);
  m_histograms.push_back(h_clusterEnergy);

  h_clusterCells = new TH1F("h_clusterCells","",1000,0,10000);
  m_histograms.push_back(h_clusterCells);

  h_phiRec = new TH1F("h_phiRec","",1000,-.4,.4);
  m_histograms.push_back(h_phiRec);

  h_etaRec = new TH1F("h_etaRec","",1000,-.1,.1);
  m_histograms.push_back(h_etaRec);

  h_thetaRec = new TH1F("h_thetaRec","",1000,-.1,.1);
  m_histograms.push_back(h_thetaRec);

  h_cellId = new TH1F("h_cellId","", 1000, 0,5000e6);
  m_histograms.push_back(h_cellId);

  h_etaphi1 = new TH2F("h_etaphi1","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi2 = new TH2F("h_etaphi2","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi3 = new TH2F("h_etaphi3","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi4 = new TH2F("h_etaphi4","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi5 = new TH2F("h_etaphi5","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi6 = new TH2F("h_etaphi6","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi7 = new TH2F("h_etaphi7","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi8 = new TH2F("h_etaphi8","", 800,-4,4, 704, -TMath::Pi(), TMath::Pi());
  h_etaphi9 = new TH2F("h_etaphi9","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi10 = new TH2F("h_etaphi10","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi11 = new TH2F("h_etaphi11","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi12 = new TH2F("h_etaphi12","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi13 = new TH2F("h_etaphi13","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi14 = new TH2F("h_etaphi14","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi15 = new TH2F("h_etaphi15","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi16 = new TH2F("h_etaphi16","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi17 = new TH2F("h_etaphi17","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  h_etaphi18 = new TH2F("h_etaphi18","", 320,-4,4, 128, -TMath::Pi(), TMath::Pi());
  m_histograms.push_back(h_etaphi1);
  m_histograms.push_back(h_etaphi2);
  m_histograms.push_back(h_etaphi3);
  m_histograms.push_back(h_etaphi4);
  m_histograms.push_back(h_etaphi5);
  m_histograms.push_back(h_etaphi6);
  m_histograms.push_back(h_etaphi7);
  m_histograms.push_back(h_etaphi8);
  m_histograms.push_back(h_etaphi9);
  m_histograms.push_back(h_etaphi10);
  m_histograms.push_back(h_etaphi11);
  m_histograms.push_back(h_etaphi12);
  m_histograms.push_back(h_etaphi13);
  m_histograms.push_back(h_etaphi14);
  m_histograms.push_back(h_etaphi15);
  m_histograms.push_back(h_etaphi16);
  m_histograms.push_back(h_etaphi17);
  m_histograms.push_back(h_etaphi18);
 
  h_ene_eta = new TH1F("h_ene_eta","", int(4./0.025),-4,4);
  m_histograms.push_back(h_ene_eta);

  h_ene_phi = new TH1F("h_ene_phi","", 128, -TMath::Pi(), TMath::Pi());
  m_histograms.push_back(h_ene_phi);

  h_ene_x = new TH1F("h_ene_x","", 10000, -5000.,5000.);
  m_histograms.push_back(h_ene_x);

  h_ene_y = new TH1F("h_ene_y","", 10000, -5000.,5000.);
  m_histograms.push_back(h_ene_y);

  h_ene_z = new TH1F("h_ene_z","",  510, -4600.,4600.);
  m_histograms.push_back(h_ene_z);

  h_ene_r = new TH1F("h_ene_r","", 1000, -2500.,2500.);
  m_histograms.push_back(h_ene_r);

  h_lambda = new TH1F("h_lambda","", 13, 0, 13);
  m_histograms.push_back(h_lambda);
}

void ClusterAnalysis::processEvent(podio::EventStore& aStore, int aEventId, bool verbose) {
  //Get the collections
  const fcc::MCParticleCollection*  colMCParticles(nullptr);
  const fcc::PositionedCaloHitCollection*     colECal(nullptr);
  const fcc::CaloClusterCollection*     clusters(nullptr);

  bool colMCParticlesOK       = aStore.get("GenParticles", colMCParticles);
  // Cell Collection
  bool colECalOK     = aStore.get(ecal_collection , colECal);
  // Cluster Collection
  bool clusterOK     = aStore.get(clusterCollection , clusters);

  double etaVertex = 0;
  double phiVertex = 0;
  double thetaVertex = 0;
  //Direction of gen. particle
  TVector3 directionParticle(0.,0.,0.);
  SumECluster = 0;

  //MCParticle and Vertices collection
  if (colMCParticlesOK) {
    if (verbose) {
      std::cout << " Collections: "          << std::endl;
      std::cout << " -> #MCTruthParticles:     " << colMCParticles->size()    << std::endl;
    }
    //Loop through the collection
    for (auto& iparticle=colMCParticles->begin(); iparticle!=colMCParticles->end(); ++iparticle) {
      TVector3 particle(iparticle->core().p4.px,iparticle->core().p4.py,iparticle->core().p4.pz);
      etaVertex = particle.Eta();
      phiVertex = particle.Phi();
      thetaVertex = 2 * atan( exp(-etaVertex) );
      //unit vector
      directionParticle = particle.Unit();
    }
  }
  else {
    //if (verbose) {
      std::cout << "No MCTruth info available" << std::endl;
      //}
  }
  
  if (clusterOK && colECalOK) {
    if (verbose) {
      std::cout << " Collections:              " << std::endl;
      std::cout << " -> #newCluster:           " << clusters->size()    << std::endl;;
      std::cout << " -> #newCellPositions:     " << colECal->size()    << std::endl;;
    }
    // std::cout << " Clusters per event:              " << clusters->size() << std::endl;
    h_nClusters -> Fill(clusters->size());
    int clusterId =0;
    for (auto const& icl=clusters->begin(); icl!=clusters->end(); ++icl){
      fcc::CaloCluster cluster = *icl;
      TVector3 hitPosition(cluster.position().x,cluster.position().y,cluster.position().z);
      h_ene_x->Fill(hitPosition.X());
      h_ene_y->Fill(hitPosition.Y());
      h_ene_z->Fill(hitPosition.Z());
      h_ene_r->Fill(hitPosition.Perp());
      h_ene_eta->Fill(hitPosition.Eta());      
      h_ene_phi->Fill(hitPosition.Phi());      
      double r = sqrt(pow(hitPosition.X(),2) + pow(hitPosition.Y(),2));
      double eta = hitPosition.Eta();
      double ET =  cluster.core().energy / cosh(eta);
      SumECluster += cluster.core().energy;
      SumET += ET;

      h_clusterEnergy->Fill(cluster.core().energy);
      h_clusterCells->Fill(cluster.hits_size());
      if (verbose) 
	std::cout << "Found " << cluster.hits_size() << " cells in cluster." << std::endl;
    
      //auto it=cluster.hits_begin();
      for (uint it = 0; it < cluster.hits_size(); it++){
	// find cell in positionedCellCollection
	for (auto& iecl=colECal->begin(); iecl!=colECal->end(); ++iecl){
	  auto cell = *iecl;
	  // std::cout << "CellID in positionedCaloHitCollection " << cell.core().cellId << std::endl;
	  if (cluster.hits(it).core().cellId == cell.core().cellId && cell.core().cellId != 0) {
	    if (verbose) {
	      std::cout << "Found cluster cell in CellCollection." << std::endl;
	    }
	    TVector3 hitPosition(cell.position().x,cell.position().y,cell.position().z);
	    double r = sqrt(pow(cell.position().x,2)+pow(cell.position().y,2));
	    TVector3 vec(iecl->position().x,cell.position().y,cell.position().z);
	    double phi = atan2( cell.position().y, cell.position().x );
	    double eta = vec.Eta();
	    int systemId = ecal_decoder.value("system",cell.core().cellId);
	    
	    int layerId;
	    if ( systemId == 5 )
	      layerId = ecal_decoder.value("layer",cell.core().cellId);
	    else if (systemId == 8 ) 
	      layerId = (*hcal_decoder).value("layer",cell.core().cellId) + 8;
	      
	    if ((layerId +1) == 1)
	      h_etaphi1->Fill(eta-etaVertex, phi-phiVertex, clusterId);//cell.core().energy);
	    else if ((layerId +1) == 2)
	      h_etaphi2->Fill(eta-etaVertex, phi-phiVertex, clusterId);//cell.core().energy);
	    else if ((layerId +1) == 3)
	      h_etaphi3->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 4)
	      h_etaphi4->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 5)
	      h_etaphi5->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 6)
	      h_etaphi6->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 7)
	      h_etaphi7->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 8)
	      h_etaphi8->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 9)
	      h_etaphi9->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 10)
	      h_etaphi10->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 11)
	      h_etaphi11->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 12)
	      h_etaphi12->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 13)
	      h_etaphi13->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 14)
	      h_etaphi14->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 15)
	      h_etaphi15->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 16)
	      h_etaphi16->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 17)
	      h_etaphi17->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	    else if ((layerId +1) == 18)
	      h_etaphi18->Fill(eta-etaVertex, phi-phiVertex, clusterId);// cell.core().energy);
	  }

	}
      }
      clusterId++;
    }
      
    if (verbose) {
      std::cout << "Total cluster energy:                 " << SumECluster << std::endl;
    }
    
    
    //Fill histograms
    h_clusters      ->Fill(SumECluster);
    h_ET              ->Fill(SumET);
    // h_phiRec          ->Fill((phiE_hcal+phiE_ecal)/(SumE_hcal+SumE_ecal) - phiVertex);
    // h_etaRec          ->Fill((etaE_hcal+etaE_ecal)/(SumE_hcal+SumE_ecal) - etaVertex);
    // h_thetaRec        ->Fill((thetaE_hcal+thetaE_ecal)/(SumE_hcal+SumE_ecal) - thetaVertex);
    // double barycenterR_ecal = (zE_ecal/SumE_ecal) * tan((thetaE_ecal/SumE_ecal));
    // double barycenterR_hcal = (zE_hcal/SumE_hcal) * tan((thetaE_hcal/SumE_hcal));
    // // Benchmark reconstruction
    // double E0_rec = SumE_ecal*m_a + SumE_hcal + m_c*sqrt(abs(E_firstLayer*m_a*E_lastLayer)) + m_d*pow(SumE_ecal*m_a,2);
    
    
  }
  else {
    std::cout << "No cluster Collection!!!!!" << std::endl;
  } 
}
void ClusterAnalysis::finishLoop(int aNumEvents, bool aVerbose) {
  std::cout << "Total energy: " << h_clusters->GetMean() << std::endl;
  aNumEvents = h_ene_r->GetEntries();
  
  // h_lambda->Scale(1./(double)aNumEvents);
  h_ene_r  ->Scale(1./h_ene_r->Integral());
  h_ene_phi->Scale(1./h_ene_phi->Integral());
  h_ene_eta->Scale(1./h_ene_eta->Integral());
  
  std::cout << "Integral phi " << h_ene_phi->Integral() << std::endl;
}
